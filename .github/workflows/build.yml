name: Build and Upload Modfetch

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: # 允许手动触发工作流

jobs:
  build_for_platforms:
    name: Build on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9"] # 指定 Python 3.9

    steps:
      - name: Checkout Code # 步骤1: 检出代码
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }} # 步骤2: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 假设您的 build.sh 脚本需要依赖才能运行，您可以在这里安装
      # 例如：
      # - name: Install dependencies (if any)
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install aiohttp aiofiles toml pyyaml xmltodict
      #   shell: bash # 在 Windows 上也使用 bash shell 运行以确保兼容性，或者使用 cmd/powershell

      - name: Make build.sh executable (Linux only) # 步骤3: 赋予 build.sh 脚本执行权限 (仅限Linux)
        if: matrix.os == 'ubuntu-latest'
        run: chmod +x ./build.sh
        shell: bash

      - name: Run build script # 步骤4: 运行您的构建脚本
        run: ./build.sh
        shell: bash

      - name: Archive modfetch directory # 步骤5: 打包 modfetch 目录 (用于上传)
        # 在 Linux 上使用 tar，在 Windows 上使用 zip
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            tar -czf modfetch.tar.gz modfetch.exe
          else
            7z a modfetch.zip modfetch.bin
          fi
        shell: bash # 在 Windows 上也使用 bash 来确保 tar/7z 命令的执行环境

      - name: Upload modfetch artifact # 步骤6: 上传打包好的 modfetch 文件
        uses: actions/upload-artifact@v4
        with:
          name: modfetch-build-${{ matrix.os }}
          path: |
            modfetch.tar.gz
            modfetch.zip
          retention-days: 7 # 构建产物保留7天
